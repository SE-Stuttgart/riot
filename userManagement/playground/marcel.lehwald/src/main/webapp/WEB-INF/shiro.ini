[main]
#password matcher
#passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
#passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
#passwordMatcher.passwordService = $passwordService
passwordMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher

#datasource
dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = jdbc/iot
dataSource.requiredType = javax.sql.DataSource
dataSource.resourceRef = true

#realm for user + password authentication
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM users WHERE username = ?
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource = $dataSource

#realm for token authentication
tokenRealm = de.uni_stuttgart.riot.userManagement.shiro.AccessTokenRealm
tokenRealm.authenticationQuery = SELECT users.username, users.password FROM users INNER JOIN tokens ON users.userID = tokens.userID WHERE tokens.tokenvalue = ?;
tokenRealm.dataSource = $dataSource

securityManager.realms = $jdbcRealm, $tokenRealm

#filter
tokenAuthentication = de.uni_stuttgart.riot.userManagement.shiro.AccessTokenAuthenticationFilter

[urls]
/api/v1/users/** = noSessionCreation, tokenAuthentication
