[main]
#authc.loginUrl = /login.jsp
#authc.successUrl = /home.jsp

#password matcher
#passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
#passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
#passwordMatcher.passwordService = $passwordService
passwordMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher

dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = jdbc/iot
dataSource.requiredType = javax.sql.DataSource
dataSource.resourceRef = true

jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm
jdbcRealm.permissionsLookupEnabled = true
jdbcRealm.authenticationQuery = SELECT password FROM users WHERE username = ?
jdbcRealm.userRolesQuery = SELECT role_name FROM users_roles WHERE username = ?
jdbcRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.dataSource=$dataSource
securityManager.realms = $jdbcRealm

#cacheManager = org.apache.shiro.cache.ehcache.EhCacheManager
#securityManager.cacheManager = $cacheManager
#jdbcRealm.authenticationCachingEnabled = true

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
#/login.jsp = authc
#/home.jsp = anon, authc
#/logout = logout
#/account/** = authc
