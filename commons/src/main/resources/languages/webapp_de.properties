nav_home=Home
nav_features=Features
nav_scenario=Beispiel Szenario
nav_documentation=Dokumentation
nav_sign_in=Anmelden

description=Ein einfach erweiterbares Internet of Things Framework zum erstellen, simulieren, studieren und verwalten eines Internet der Dinge.

description_server=Der RIOT Server verbindet und verwaltet alle Dinge. Der Server ist in Java geschrieben und alle Daten werden in einer Datenbank gespeichert.

description_interface=RIOT enthält eine Android App die es erlaubt Notifications zu empfangen und Dinge zu verwalten. Außerdem kann auf den Account und die Administration über ein Webinterface zugegriffen werden.

description_things=RIOT bietet eine REST-Schnittstelle um Dinge mit dem Server zu verbinden. Außerdem bietet RIOT Java-Klassen zur einfachen Simulationen von Dingen.

about_riot=Über das RIOT Projekt

development=Entwicklung
development_text=RIOT wurde als Entwicklungsprojekt Internet of Things des Master Softwaretechnik Studiengangs an der Universität Stuttgart im Wintersemester 2014/15 entwicklet. 

overview=Überblick

vision=Vision
vision_text=Das Produkt ermöglicht eine Reihe von realistischen Internet of Things Szenarien, die untersucht und leicht erweitert werden können. Wir wollen in der Lage sein zu untersuchen, wie neue Szenarien zum Internet of Things (IoT) hinzugefügt werden können. Wir wollen einen IoT Environment haben das mit simulierten und echten Geräten zusammenarbeitet der Fokus liegt dabei auf der Kommunikation zwischen Smartphones und verschieden Geräten direkt und über die Cloud. Zum Beispiel werden wir ein Auto und verschiedene elektronische Geräte simulieren. Die Geräte kommunizieren und steuern sich gegenseitig auf sichere Weise. Eine mobile Anwendung und eine Website sind dabei die Schnittstelle zur Steuerung.

mission=Mission
mission_text=Für die Software Engineering Forschungsgemeinschaft, insbesondere die Software Engineering Abteilung an der Universität Stuttgart, wird mit dem IoT-Projekt eine IoT-Plattform entwickelt und bereitstellt. Diese wird außerdem als Open Source verfügbar gemacht. Die Plattform soll von hoher Qualität und leicht erweiterbar sein. Es sollten mindestens eine mobile Anwendung, eine Cloud-Service mit Web-Interface sowie Schnittstellen zu einem Auto und Hauselektronik (Simulator) enthalten sein.

features_server=Der Kern von RIOT ist eine in Java geschriebene Serveranwendung die auf einem Java Application Server (GlassFish) läuft. Der RIOT Server verwaltet die User mit ihren Berechtigungen und stellt die Verbindung der verschieden Dingen des IoT her. Die benötigten Daten werden dabei in einer Datenbank (MySql) abgelegt. Zum Austausch von Informationen mit dem Server dient eine umfangreiche REST Schnittstelle. Außerdem besteht die Möglichkeit sich auf bestimmte Events zu Registrieren. Ein umfangreiches Regelsystem das vom Server bereitgestellt und ausgewertet wird ist dabei zentraler Bestandteil für das Zusammenspiel verschiede Dinge des IoT.
features_web=Für den Zugriff auf den eigenen Account und die Administration steht ein Web Interface zu Verfügung. Dieses erlaubt es Nutzern auf ihre Kalender zuzugreifen, Notifications zu empfangen, die eigenen Things zu verwalten und mit anderen Nutzern zu teilen sowie Regeln zu erstellen. Administratoren können außerdem darüber den Server Konfigurieren sowie die Benutzer, Regeln und Berechtigungen verwalten.
features_android=Für die mobilen Zugriff auf das IoT Environment enthält RIOT eine Android App. Dieser erlaubt den Empfang von Notifications und die Verwaltung aller Things über das Smartphone.
features_things=Zur Anbindung realer Things stellt der Server eine REST Schnittstelle zu Verfügung. Diese erlaubt die einfache Entwicklung und Anbindung beliebiger spezifischer Clients und realer Dinge. Außerdem existiert eine umfangreiche in Java geschriebene Client Library die die Anbindung an den RIOT Server mit Java noch leichter macht. 
features_simulation=Mit RIOT ist eine einfache Simulation von Thins für das IoT möglich. RIOT enthält dafür ein in Java geschriebenes generisches Simulation Framework bestehend aus verschieden Java Klassen das Erstellung von neuen Clients zur Simulation beliebiger Dinge für das IoT erleichtert.