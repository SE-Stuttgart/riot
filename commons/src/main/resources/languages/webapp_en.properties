nav_home=Home
nav_features=Features
nav_scenario=Example Scenario
nav_documentation=Documentation
nav_sign_in=Sign In

description=A easily extensible Internet of Things Framework to build, simulate, study and manage an IoT environment.

description_server=The RIOT Server connects and manages all the things. The Server is written in Java and all the data is stored in a database.

description_interface=RIOT contains an Android app that allows to receive notifications and manage connected things. Additionally, you can access your account and the administration via a web interface.

description_things=RIOT offers a REST interface to connect things with the server. RIOT additionally offers Java classes to easily build simulations of things.

about_riot=About the RIOT project

development=Development
development_text=RIOT was created as part of the development project 'Internet of Things' of the MSc Software Engineering at the University of Stuttgart in the winter semester 2014/15.

overview=Overview

vision=Vision
vision_text=The product enables a number of realistic Internet of Things scenarios which can be studied and extended easily. We want to be able to investigate how new scenarios can be added to the Internet of Things (IoT). We will have an IoT environment which can work with simulated and actual devices, focusing on the communication between smartphones and different devices directly and over the cloud. For example, we will simulate a car computer unit and house electronic devices. Devices communicate and control each other in a secure and safe way. A mobile application and a web site are main controllers.

mission=Mission
mission_text=For the software engineering research community, in particular the Software Engineering group at the University of Stuttgart, the IoT project will develop and deploy an IoT platform. It will be made available as open source. The platform should be of high quality and easily extendible. It should include at least a mobile application, a cloud service with Web interface and interfaces to a car and house electronics (simulator).

features_server=The core of RIOT is a server application written in Java running on a Java Application Server (GlassFish). The RIOT server manages the users and their permissions and connects the different things of the IoT. The required data is stored in a database. To exchange information with the server, a powerful REST interface is provided. It is also possible to register on certain events. A rule system that is provided and evaluated by the server is a central component of the interaction of various IoT things.
features_web=A web interface is available for access to your account and the administration. This allows users to access their calendars, to receive notifications, manage their own things, share them with other users, and create rules. Administrators can also configure the server and manage the rules and permissions of the users.
features_android=For mobile access to the IoT environment, RIOT contains an Android app. This allows you to receive notifications and manage all the Things on the smartphone.
features_things=To connect real things, the server offers a REST interface. This allows easy development and integration of arbitrary specific clients and real things. In addition, there is a client library written in Java that makes the connection to the RIOT server with Java even easier.
features_simulation=With RIOT, a simple simulation of things for the IoT is possible. RIOT contains a generic simulation framework written in Java. It consists of different Java classes and allows an easy creation of new clients to simulate things for the IoT.

example_text=Das Ziel von RIOT ist die Verknüpfung von Dingen (Things) über das Internet. Dabei ist vor allem die Möglichkeit den Status dieser Dinge einzusehen und sie von überall direkt über Klicks oder indirekt über Regeln zu steuern wichtig. Sowohl die RIOT-App als auch die Weboberfläche bieten dazu für alle Dinge verwendbare gegnerische Oberflächen über die der Zugriff auf die Dinge möglich ist. In der RIOT-App ist außerdem vorgesehen für bestimmte Geräte spezifische Oberflächen darzustellen um eine bessere Darstellung und intuitivere Bedingung zu ermöglichen.
example_androidapp=Beispiel: Kaffeemaschine Android
example_androidapp_text=Über eine eigene Benutzeroberfläche innerhalb der RIOT-App kann eine Kaffeemaschine (bzw. ein Simulator) ferngesteuert werden. Verschiedene Schaltflächen für das Starten des Brühvorgangs oder für die Reinigung ermöglichen eine einfache Kontrolle und intuitive Bedienung. Der gewünschte Kaffee kann beispielsweise in der Stärke- oder Menge bequem angepasst werden. Damit der Benutzer über den aktuellen Status der Maschine informiert ist, gibt es weitere Anzeigeflächen für den vorhandenen Bohnen- und Wasserstand. Ereignisse und Benachrichtigungen werden auf dem gelben Zettel dargestellt und informieren über die einzelnen Vorgänge.
example_webapp=Beispiel: Kaffeemaschine Webinterface
example_webapp_text=Auch die Weboberfläche ermöglicht es den Status der Kaffeemaschine einzusehen und sie zu steuern. Dazu stehen wie in der RIOT-App verschiedene Schaltflächen zur Verfügung. Im Gegensatz zur RIOT-App gibt es hier aber nur die genersiche Darstellung als Thing und keine spezielle Oberfläche für die Kaffeemaschine.