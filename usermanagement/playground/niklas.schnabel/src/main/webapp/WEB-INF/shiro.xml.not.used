<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService"/>

	<bean id="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
		<property name="passwordService" ref="passwordService"/>
	</bean>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.postgresql.Driver"/>
		<property name="url" value="jdbc:postgresql://localhost:5432/iot_test"/>
		<property name="username" value="postgres"/>
		<property name="password" value="test"/>
	</bean>

	<!-- Define the realm you want to use to connect to your back-end security datasource: -->
	<bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="permissionsLookupEnabled" value="true"/>
		<property name="authenticationQuery" value="SELECT password FROM USERS WHERE username = ?"/>
		<property name="userRolesQuery" value="SELECT role_name FROM USERS_ROLES WHERE username = ?"/>
		<property name="credentialsMatcher" ref="passwordMatcher"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="myRealm"/>
	</bean>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="filterChainDefinitions">
	        <value>
	            # some example chain definitions:
	            #/admin/** = authc, roles[admin]
	            #/docs/** = authc, perms[document:read]
	            #/** = authc
	            # more URL-to-FilterChain definitions here
	        </value>
	    </property>
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
	<!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
	<!-- applications - see the 'Web Applications' section below instead.                 -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>

	<!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
	    <property name="securityManager" ref="securityManager"/>
	</bean>

</beans>