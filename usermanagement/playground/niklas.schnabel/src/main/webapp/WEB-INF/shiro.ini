[main]
#password matcher
#passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
#passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
#passwordMatcher.passwordService = $passwordService
passwordMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher

#datasource
dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = jdbc/iot
dataSource.requiredType = javax.sql.DataSource
dataSource.resourceRef = true

#realm for user + password authentication
usernamePasswordRealm = de.uni_stuttgart.riot.userManagement.security.UsernamePasswordRealm
usernamePasswordRealm.authenticationQuery = SELECT pword FROM users WHERE username = ?
usernamePasswordRealm.credentialsMatcher = $passwordMatcher
usernamePasswordRealm.dataSource = $dataSource

#realm for access token authentication and authorization
tokenRealm = de.uni_stuttgart.riot.userManagement.security.AccessTokenRealm
tokenRealm.authenticationQuery = SELECT users.username, users.pword FROM users INNER JOIN tokens ON users.userID = tokens.userID WHERE tokens.tokenvalue = ?
tokenRealm.rolesQuery = SELECT roles.rolename FROM roles INNER JOIN tokens_roles ON tokens_roles.roleID = roles.roleID INNER JOIN tokens ON tokens.tokenID = tokens_roles.tokenID WHERE tokens.tokenvalue = ?
tokenRealm.permissionsQuery = SELECT permissionvalue FROM permissions INNER JOIN roles_permissions ON roles_permissions.permissionID = permissions.permissionID INNER JOIN roles ON roles.roleID = roles_permissions.roleID WHERE roles.rolename = ?
tokenRealm.dataSource = $dataSource

securityManager.realms = $tokenRealm, $usernamePasswordRealm

#filter
tokenAuthentication = de.uni_stuttgart.riot.userManagement.security.AccessTokenAuthenticationFilter

[urls]
/api/v1/auth/login = noSessionCreation, anon
/api/v1/auth/refresh = noSessionCreation, anon
/api/v1/** = noSessionCreation, tokenAuthentication
